import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { attemptLogin } from './loginApi';
import { get } from 'lodash';
import jwt_decode from "jwt-decode";

const initialState = {
  user: null,
  token: null,
  status: null,
  exp: null,
  loggedIn: false,
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const login = createAsyncThunk(
  'login/attemptLogin',
  async (loginObj) => {
    const response = await attemptLogin(get(loginObj, 'username', ''), get(loginObj, 'password', ''));
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const loginSlice = createSlice({
  name: 'login',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setStatusIdle: (state) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.status = 'idle';
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(login.pending, (state) => {
        console.log('loading');
        state.status = 'loading';
      })
      .addCase(login.fulfilled, (state, action) => {
        console.log('fulfilled');
        const token = action.payload.token;
        state.status = 'idle';
        state.token = token;
        const decodedToken = jwt_decode(token);
        state.user = decodedToken.username;
        state.exp = decodedToken.exp;
        state.loggedIn = true;
      })
      .addCase(login.rejected, (state, action) => {
        console.log('rejected');
        state.status = 'rejected';
        state.token = null;
        state.user = null;
        state.exp = null;
        state.loggedIn = false;
      });
  },
});

export const { setStatusIdle } = loginSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectUser = (state) => state.login.user;
export const selectToken = (state) => state.login.token;
export const selectExp = (state) => state.login.exp;
export const selectStatus = (state) => state.login.status;
export const selectLoggedIn = (state) => state.login.loggedIn;

export default loginSlice.reducer;
